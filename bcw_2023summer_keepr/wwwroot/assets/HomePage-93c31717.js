import{_ as y,j as h,k as f,m as w,c as k,K as C,n as B,o as a,b as i,d as r,F as v,q as x,s as m,P as g,l as u,A as K,t as A}from"./index-a1a24051.js";const I={setup(){function n(){const e=document.getElementsByClassName("keep-card");if(!(e.length<0))for(let t=0;t<e.length;t++)isNaN(parseInt(e[t].style.height))&&(e[t].style.height=`${Math.floor(Math.random()*200+300)}px`)}function c(){const e=document.getElementsByClassName("keep-card");if(e.length>0)for(let t=0;t<e.length;t++)l(e[t])}function l(e){const t=document.getElementsByClassName("masonry-layout")[0],s=parseInt(window.getComputedStyle(t).getPropertyValue("grid-auto-rows")),p=parseInt(window.getComputedStyle(t).getPropertyValue("row-gap")),_=Math.ceil((e.getBoundingClientRect().height+p)/(s+p));e.style.gridRowEnd="span "+_}const o=async()=>{try{await m.getAllKeeps()}catch(e){g.error(e.message),u.error(e)}},d=async()=>{try{m.clearAllKeeps()}catch(e){g.error(e.message),u.error(e)}};return h(async()=>await o()),f(()=>d()),w(()=>{n(),c()}),{keeps:k(()=>K.keeps)}},components:{KeepCard:C}},N={class:"container-fluid"},P={class:"row"},E={class:"col-md-10 col-12 mx-auto py-4 px-md-0 px-3"},S={class:"masonry-layout"};function H(n,c,l,o,d,e){const t=B("KeepCard");return a(),i("div",N,[r("section",P,[r("div",E,[r("div",S,[(a(!0),i(v,null,x(o.keeps,s=>(a(),A(t,{key:s.id,keep:s},null,8,["keep"]))),128))])])])])}const $=y(I,[["render",H],["__scopeId","data-v-ab0e942e"]]);export{$ as default};
